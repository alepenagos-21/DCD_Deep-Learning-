# Proyecto 1: Predicción de temperatura con LSTM
#Alejandra Elizabeth Penagos Jimenez 

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# 1. Cargar el dataset
# Asegúrate de que el archivo jena_climate_2009_2016.csv esté en el mismo directorio

df = pd.read_csv('jena_climate_2009_2016.csv')
df_temp = df[['T (degC)']].copy()

# 2. Normalizar los datos
globalscaler = MinMaxScaler()
temp_scaled = globalscaler.fit_transform(df_temp)

# 3. Crear secuencias para el modelo LSTM
def create_sequences(data, steps=24):
    X, y = [], []
    for i in range(len(data) - steps):
        X.append(data[i:i+steps])
        y.append(data[i+steps])
    return np.array(X), np.array(y)

X, y = create_sequences(temp_scaled)

# 4. Dividir en entrenamiento y validación
split = int(len(X) * 0.8)
X_train, X_val = X[:split], X[split:]
y_train, y_val = y[:split], y[split:]

# 5. Crear modelo LSTM
model = Sequential()
model.add(LSTM(64, input_shape=(X.shape[1], X.shape[2])))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mse')

# 6. Entrenar modelo
history = model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=10, batch_size=64)

# 7. Evaluar y visualizar

# Predicción
y_pred = model.predict(X_val)

# Invertir escalado para comparar con datos reales
y_val_real = globalscaler.inverse_transform(y_val.reshape(-1, 1))
y_pred_real = globalscaler.inverse_transform(y_pred)

# Gráfica de resultados
plt.figure(figsize=(12, 6))
plt.plot(y_val_real, label="Temperatura real")
plt.plot(y_pred_real, label="Predicción LSTM")
plt.title("Predicción de Temperatura con LSTM")
plt.xlabel("Tiempos")
plt.ylabel("Temperatura (C)")
plt.legend()
plt.show()
